pushd mtrls/windows
HASH_LINES=$(
  for f in *; do
    h=$(sha256sum "$f" | cut -d' ' -f1)
    # wrap in quotes so .bat sees: "filename=hash"
    echo "\"$f=$h\""
  done
)
popd

cat > notes.txt <<EOF
Uploaded on $(TZ='Asia/Dhaka' date +'%Y%m%d_%H%M') (UTC +06)

Applies to \`$1 - $1+\`

Double click \`verifyMaterials_$1.bat\` to verify your materials in \`Materials (backup)\` or from your installed Minecraft.
EOF

cat > "verifyMaterials_$1.bat" <<EOF
@echo off
setlocal enabledelayedexpansion

>nul 2>&1 certutil /? || (echo [91m[^^!] certutil not found in PATH[0m & goto :EOF)

set gameVersion=$1

cd /d "%~dp0"
if /i "%~1" equ "hash" goto hashBackup

if not exist "Materials (backup)" (
    echo Please put this script in a folder where all materials are stored in a folder named "Materials (backup)"
    echo.
    echo Example:
    echo.
    echo Current folder
    echo      ^|
    echo      ^|-- verifyMaterials_%gameVersion%.bat
    echo      ^|-- Materials ^(backup^)
    echo                ^|
    echo                ^|- Actor.material.bin
    echo                ^|- RenderChunk.material.bin
    echo                ^|- Sky.material.bin
    echo                ^|- ...
    echo.
    echo Do you want to check materials from installed Minecraft instead?
    echo.
    echo [Y] Yes    [N] No
    echo.
    choice /c yn /n >nul
    if !errorlevel! neq 1 (goto failure)
    echo Getting Minecraft location using PowerShell...
    echo.
    echo.
    set "MCLOCATION="
    for /f "tokens=* delims=" %%i in ('powershell -NoProfile -Command "(Get-AppxPackage -Name Microsoft.MinecraftUWP).InstallLocation"') do (set MCLOCATION=%%i)
    if not defined MCLOCATION (
        echo Minecraft is not installed.
        goto failure
    )
    set "materialsLocation=!MCLOCATION!\data\renderer\materials"
) else (
    set "materialsLocation=Materials (backup)"
)



:verifyMaterials
set "totalMaterials="
set "matchFailed="
set "progressCounter="
set "fileCounter="
for %%M in ("%materialsLocation%\*") do set /a fileCounter+=1
call :setHash
if !fileCounter! neq !totalMaterials! echo [91mFile count mismatch ^(!fileCounter! ^^!= !totalMaterials!^)[0m & goto failure

for %%M in ("%materialsLocation%\*") do (
    set /a progressCounter+=1
    echo [1F[0KVerifying %gameVersion% materials ^(!progressCounter!/!totalMaterials!^)
    for /f "tokens=*" %%H in ('certutil -hashfile "%%M" SHA256 ^| findstr /v ":"') do (
        if "%%H" neq "!%%~nxM!" (
            echo.
            echo [91m[^^!] Materials doesn't match with %gameVersion%[0m
            :failure
            echo.
            echo Press any key to exit...
            pause >nul
            exit 1
        )
    )
)
echo.
echo [92m[*] All materials are OK.[0m
echo.
echo Press any key to exit...
pause >nul
exit 0

:setHash
for %%V in (
$HASH_LINES
) do (
    set %%V
    set /a totalMaterials+=1
)


goto :EOF

:hashBackup
if exist "materials_hash_%gameVersion%.txt" del /q /f ".\materials_hash_%gameVersion%.txt"
for %%M in ("Materials (backup)\*") do (
    for /f "tokens=*" %%H in ('certutil -hashfile "%%M" SHA256 ^| findstr /v ":"') do (
        echo %%~nxM=%%H>>materials_hash_%gameVersion%.txt
    )
)
goto :EOF
EOF

sudo apt-get update
sudo apt-get install -y dos2unix

unix2dos -f "verifyMaterials_$1.bat"
